" ----------------------------------------------------------------------
"  Vim package manager
" ----------------------------------------------------------------------
call plug#begin('~/.config/nvim/bundle')

" ----------------------------------------------------------------------
"  My Plugins
" ----------------------------------------------------------------------

" denite.vim
Plug 'Shougo/neomru.vim'
Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugins'}

" Improves editing efficiency.
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
Plug 'Rip-Rip/clang_complete', {'for': ['c','cpp']}
Plug 'zchee/deoplete-clang', {'for': ['c','cpp']}
Plug 'neomake/neomake'
Plug 'dojoteef/neomake-autolint'
Plug 'zchee/deoplete-jedi', {'for': 'python'}
Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
Plug 'Shougo/neco-vim'
Plug 'carlitux/deoplete-ternjs'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'tomtom/tcomment_vim'

" Makes things look better.
Plug 'iCyMind/NeoSolarized'
Plug 'joshdick/onedark.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nathanaelkane/vim-indent-guides'

" Improves Vim functionality.
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'eugen0329/vim-esearch'
Plug 'ervandew/supertab'
Plug 'critiqjo/lldb.nvim', {'do': ':UpdateRemotePlugins', 'for': ['c','cpp']}
Plug 'sheerun/vim-polyglot'

Plug 'mattn/emmet-vim', {'for': ['html','css']}
Plug 'dietsche/vim-lastplace'

" ----------------------------------------------------------------------
"  Important
" ----------------------------------------------------------------------

call plug#end()

filetype plugin indent on

set pastetoggle=<F3>

" ----------------------------------------------------------------------
"  Plugin Settings
" ----------------------------------------------------------------------

" Unite.vim
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" call unite#filters#sorter_default#use(['sorter_rank'])

""""""""""""
"  Denite  "
""""""""""""
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
call denite#custom#source('_', 'sorters', ['sorter_sublime'])

call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

""""""""""""""
"  Deoplete  "
""""""""""""""
let g:deoplete#enable_at_startup=1

""""""""""""""""""""
"  clang_complete  "
""""""""""""""""""""
let g:clang_library_path='/usr/lib/libclang.so'
let g:clang_snippets=1
let g:clang_close_preview=1
let g:clang_complete_patterns=1
let g:clang_user_options='-std=c++14'

""""""""""""""""""""
"  deoplete-clang  "
""""""""""""""""""""
let g:deoplete#sources#clang#libclang_path='/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header='/usr/lib/clang'

"""""""""""""""
"  Ultisnips  "
"""""""""""""""
let g:UltiSnipsEditSplit="vertical"
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<C-j>"
" let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
let g:UltiSnipsListSnippets="<c-e>"
let g:UltiSnipsSnippetsDir="~/.config/nvim/UltiSnips"

"""""""""""""
"  NeoMake  "
"""""""""""""
let g:neomake_c_clang_maker = {
			\ 'args': ['-Wall', '-Wextra', '-pedantic', '-Wno-sign-conversion', '-std=c++14'],
			\}

let g:neomake_cpp_clang_maker = {
   \ 'exe': 'clang++',
   \ 'args': ['-Wall', '-Wextra', '-pedantic', '-Wno-sign-conversion', '-std=c++14'],
   \ }

let g:neomake_c_enabled_makers = ['clang']
let g:neomake_cpp_enabled_makers = ['clang']
let g:neomake_javascript_enabled_makers = ['eslint']

"""""""""""""""""
"  vim-airline  "
"""""""""""""""""
let g:airline_powerline_fonts=1
let g:airline_theme='bubblegum'

""""""""""""""""
"  auto-pairs  "
""""""""""""""""
let g:AutoPairsFlyMode=1

"""""""""""""""
"  Emmet.vim  "
"""""""""""""""
let g:user_emmet_leader_key='<C-e>'
let g:user_emmet_install_global=1

""""""""""""""
"  Supertab  "
""""""""""""""
let g:SuperTabDefaultCompletionType = '<C-n>'

""""""""""""""
"  lldb.vim  "
""""""""""""""
nmap <F2> <Plug>LLBreakSwitch
vmap <F2> <Plug>LLStdInSelected
nnoremap <F4> :LLstdin<CR>
nnoremap <F5> :LLmode debug<CR>
nnoremap <F17> :LLmode code<CR>
nnoremap <F8> :LL continue<CR>
nnoremap <F20> :LL process interrupt<CR>
nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>

""""""""""""""""""
"  tern-for-vim  "
""""""""""""""""""
let g:tern_show_argument_hints = 'on_hold'
let g:tern_show_signature_in_pum = 1

"""""""""""""""""""
"  deoplete-tern  "
"""""""""""""""""""
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]

" ----------------------------------------------------------------------
"  Moving around, searching and patterns
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Tags
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Displaying text
" ----------------------------------------------------------------------
"
set number " Display line numbers relative to cursor position.

set list " Don't show invisible characters.
set listchars=tab:▸\ ,eol:¬ " Set invisible character repsentations.

set concealcursor=inv
set conceallevel=2
" ----------------------------------------------------------------------
"  Syntax, highlighting and spelling
" ----------------------------------------------------------------------

set incsearch " Show match for partly typed search command.
set ignorecase " Ignore case when using a search pattern.
set smartcase " Override 'ignorecase' when pattern has upper case
" characters.

set cursorline " Highlight the screen line of the cursor.
set colorcolumn=72 " Columan to highlight.

syntax enable " Turns on syntax highlighting

" For solarized colorscheme
let g:neosolarized_visibility = "normal" " Visibility of invisible characters.

set background=dark " Set colorscheme shade variant
colorscheme onedark " Set default colorscheme

if has("nvim")
	set termguicolors
endif

" ----------------------------------------------------------------------
"  Multiple windows
" ----------------------------------------------------------------------

set hidden " Unload a buffer when no longer shown in a window.

set laststatus=2 " Display vim-airline always.

" ----------------------------------------------------------------------
"  Multiple tab pages
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Terminal
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Using the mouse
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  GUI
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Printing
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Messages and info
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Selecting text
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Editing text
" ----------------------------------------------------------------------

set formatoptions=cqn
set textwidth=72

set completeopt=menu,menuone,preview

set backspace=2

" ----------------------------------------------------------------------
"  Tabs and indenting
" ----------------------------------------------------------------------

set tabstop=2 " Number of spaces a <Tab> in the text stands for.
set shiftwidth=2 " Number of spaces used for each step of (auto)indent.
set softtabstop=2 " If non-zero, number of spaces to insert for a <Tab>.
set smarttab " A <Tab> in an indent inserts 'shiftwidth' spaces.
set noexpandtab " Do not expand <Tab> to spaces in Insert mode.

set autoindent " Automatically set the indent of a new line.
set copyindent " Copy whitespace for indenting from previous line.

" ----------------------------------------------------------------------
"  Folding
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Diff mode
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Mapping
" ----------------------------------------------------------------------

let mapleader=','

" No more escape key! Yay!
inoremap jk <Esc>

" Edit $MYVIMRC in new tab.
nnoremap <leader>v :tabedit ~/.dotfiles/files/vimrc<CR>

" Save current buffer.
nnoremap <leader>w :w<CR>

" Delete current buffer.
nnoremap <leader>d :bd! %<CR>

" Strips trailing whitespace.
nnoremap <leader>W :call Preserve("%s/\\s\\+$//e")<CR>
" Formats entire buffer.
nnoremap <leader>= :call Preserve("normal gg=G")<CR>

" Better window navigation.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Directory navigation.
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" I you forgot to sudo Vim
cnoremap w!! w !sudo tee % >/dev/null

" My own version of temporary fullscreen
nnoremap tt :tab split<CR>

" Terminal splitting (Neovim ONLY)
nnoremap <leader><S-h> :leftabove vs +term<CR>
nnoremap <leader><S-j> :belowright sp +term<CR>
nnoremap <leader><S-k> :aboveleft sp +term<CR>
nnoremap <leader><S-l> :rightbelow vs +term<CR>

" Terminal navigation
tmap <C-h> <C-\><C-n><C-w>h
tmap <C-j> <C-\><C-n><C-w>j
tmap <C-k> <C-\><C-n><C-w>k
tmap <C-l> <C-\><C-n><C-w>l

" Normal mode in termianl
tnoremap <C-t> <C-\><C-n>

""""""""""""
"  Denite  "
""""""""""""
call denite#custom#map(
			\ 'insert',
			\ '<C-j>',
			\ '<denite:move_to_next_line>',
			\ 'noremap'
			\)
call denite#custom#map(
			\ 'insert',
			\ '<C-k>',
			\ '<denite:move_to_previous_line>',
			\ 'noremap'
			\)

nnoremap <C-p> :Denite -buffer-name=files file_rec<CR>
nnoremap <leader>g :Denite -buffer-name=grep grep<CR>
nnoremap <leader>r :Denite -buffer-name=recent file_mru<CR>
nnoremap <leader>y :Denite -buffer-name=yank registere<CR>
nnoremap <leader>b :Denite -buffer-name=buffers buffer<CR>
nnoremap <leader>o :Denite -buffer-name=tags outline<CR>

"""""""""""""
"  NeoMake  "
"""""""""""""
nmap <Leader><Space>o :lopen<CR>      " open location window
nmap <Leader><Space>c :lclose<CR>     " close location window
nmap <Leader><Space>, :ll<CR>         " go to current error/warning
nmap <Leader><Space>n :lnext<CR>      " next error/warning
nmap <Leader><Space>p :lprev<CR>      " previous error/warning

"""""""""""""
"  Tabular  "
"""""""""""""
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

""""""""""""""""""
"  vim-fugitive  "
""""""""""""""""""
nnoremap <leader>gb  :Gblame<CR>
nnoremap <leader>gc  :Gcommit -S<CR>
nnoremap <leader>gca :Gcommit -aS<CR>
nnoremap <leader>gd  :Gdiff<CR>
nnoremap <leader>gl  :Gpull<CR>
nnoremap <leader>gp  :Gpush<CR>
nnoremap <leader>gr  :Gread<CR>
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <leader>gw  :Gwrite<CR>

"""""""""""""
"  ESearch  "
"""""""""""""
let g:esearch = {
  \ 'adapter':    'ag',
  \ 'backend':    'nvim',
  \ 'out':        'win',
  \ 'batch_size': 1000,
  \ 'use':        ['visual', 'hlsearch', 'last'],
  \}

" ----------------------------------------------------------------------
"  Reading and writing files
" ----------------------------------------------------------------------

set backup " Keep a backup after overwriting a file.
set writebackup " Write a backup file before overwriting a file.
set backupdir=~/.config/nvim/.backup// " List of directories to put backup files
" in.

" ----------------------------------------------------------------------
"  The swap file
" ----------------------------------------------------------------------

set directory=~/.config/nvim/.swp// " Directory to keep .swp files in.

" ----------------------------------------------------------------------
"  Command line editing
" ----------------------------------------------------------------------

set wildmenu " Command-line completion shows a list of matches.
set wildignore+=*/.git/*,*/.hg/*,*/.svn/* " Ignore version management.

" ----------------------------------------------------------------------
"  Executing external commands
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Running make and jumping to errors
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Language specific
" ----------------------------------------------------------------------

" let g:python_host_prog = '/usr/bin/python3'

" ----------------------------------------------------------------------
"  Multi-byte characters
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  Various
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
" Autocmds
" ----------------------------------------------------------------------

if has("autocmd") " If Vim was compiled with autocmd support.
	augroup Tabs " Set tab stops based on file type.
		autocmd!
		autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
	augroup end

	augroup VariousFileTypes
		autocmd!
		autocmd FileType help nmap <buffer> <C-c> :q<CR>
		autocmd FileType qf nmap <buffer> <C-c> :q<CR>
		autocmd BufWinEnter,WinEnter term://* startinsert
		autocmd BufLeave term://* stopinsert
		" autocmd FileType html,css,stylus,javascript imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
	augroup end

	augroup WritePre " All BufWritePre autocommands.
		autocmd!
		autocmd BufWritePre * :call Preserve("%s/\\s\\+$//e")
	augroup end

	augroup TextEditing
		autocmd!
		autocmd FileType tex setlocal formatoptions+=t
		autocmd FileType markdown,md,txt setlocal formatoptions+=ta
		autocmd FileType tex,markdown,md,txt,gitcommit setlocal spell
	augroup end

	augroup omnifunc
		autocmd!
		autocmd FileType c,cpp setlocal omnifunc=ccomplete#Complete
	augroup end

	autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
endif

" ----------------------------------------------------------------------
" Functions
" ----------------------------------------------------------------------

function! Preserve(command)
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	execute a:command
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction
