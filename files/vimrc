" ------------------------------------------------------------------------------
"  Vim package manager
" ------------------------------------------------------------------------------
call plug#begin('~/.config/nvim/plugged')

" ------------------------------------------------------------------------------
"  My Plugins
" ------------------------------------------------------------------------------

" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'Shougo/deoplete-clangx'
" Plug 'Shougo/neoinclude.vim'
" Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" Plug 'bilalq/lite-dfm'
" Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' } Plug
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'iCyMind/NeoSolarized'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'chriskempson/base16-vim'
Plug 'arcticicestudio/nord-vim'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
Plug 'tpope/vim-commentary'
Plug 'xavierd/clang_complete'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'dietsche/vim-lastplace'
Plug 'neomake/neomake'
Plug 'jiangmiao/auto-pairs'
Plug 'ncm2/float-preview.nvim'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'sheerun/vim-polyglot'
Plug 'bfrg/vim-cpp-modern'
Plug 'lifepillar/vim-mucomplete'

" ------------------------------------------------------------------------------
"  Important
" ------------------------------------------------------------------------------

call plug#end()
call glaive#Install()

filetype plugin indent on

" ------------------------------------------------------------------------------
"  Plugin Settings
" ------------------------------------------------------------------------------

""""""""""""""
"  Deoplete  "
""""""""""""""
" let g:deoplete#enable_at_startup=1

"""""""""""""
"  NeoMake  "
"""""""""""""
" For c code
let g:neomake_c_gcc_maker = {
    \ 'args': ['-fsanitize=signed-integer-overflow', '-fsanitize=undefined',
    \ '-ggdb3', '-O0', '-std=c11', '-Wall', '-Werror', '-Wextra', '-Wno-sign-compare',
    \ '-Wshadow', '-pedantic', '-lm', 'lcs50'],
    \ }

" For c++ code
let g:neomake_cpp_gcc_maker = {
    \ 'exe': 'g++',
    \ 'args': ['-fsanitize=signed-integer-overflow', '-fsanitize=undefined',
    \ '-ggdb3', '-O0', '-std=c++14', '-Wall', '-Werror', '-Wextra', '-Wno-sign-compare',
    \ '-Wshadow', '-pedantic', '-lm', 'lcs50'],
    \ }

" Enable makers for that code
let g:neomake_c_enabled_makers = ['gcc']
let g:neomake_cpp_enabled_makers = ['gcc']

" Run NeoMake 750ms after writing OR entering normal mode
call neomake#configure#automake('nw', 750)

""""""""""""""""
"  auto-pairs  "
""""""""""""""""
" let g:AutoPairsFlyMode=1

"""""""""""""""""
"  vim-codefmt  "
"""""""""""""""""

" Enables default mapping for code-fmt (<leader>=)
Glaive codefmt plugin[mappings]
" Changes c/c++ code formatting style
Glaive codefmt clang_format_style='file'

""""""""""""""""
"  vim-signify "
""""""""""""""""

" hunk text object
omap ic <plug>(signify-motion-inner-pending)
xmap ic <plug>(signify-motion-inner-visual)
omap ac <plug>(signify-motion-outer-pending)
xmap ac <plug>(signify-motion-outer-visual)

"""""""""""""""
" vim-airline "
"""""""""""""""

" Display buffers at top
let g:airline#extensions#tabline#enabled = 1
" Make this shit real nice
let g:airline_powerline_fonts = 1

""""""""""""""""""
" vim-mucomplete "
""""""""""""""""""

let g:mucomplete#enable_auto_at_startup = 1

""""""""""""""""""
" clang_complete "
""""""""""""""""""

" path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-8/lib'
" or path directly to the library file
let g:clang_library_path='/usr/lib/x86_64-linux-gnu/libclang-8.so.1'

" ------------------------------------------------------------------------------
"  Moving around, searching and patterns
" ------------------------------------------------------------------------------

" Search entire directory tree
set path+=**

" ------------------------------------------------------------------------------
"  Tags
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Displaying text
" ------------------------------------------------------------------------------
"
set norelativenumber number " Display line numbers relative to cursor position.

set list " Show invisible characters.
set listchars=tab:▸\ ,eol:¬ " Set invisible character repsentations.

set concealcursor=inv
set conceallevel=2
" ------------------------------------------------------------------------------
"  Syntax, highlighting and spelling
" ------------------------------------------------------------------------------

set incsearch   " Show match for partly typed search command.
set ignorecase  " Ignore case when using a search pattern.
set smartcase   " Override 'ignorecase' when pattern has upper case
                " characters.

set cursorline " Highlight the screen line of the cursor.
set colorcolumn=80 " Columan to highlight.

syntax enable " Turns on syntax highlighting

" For solarized colorscheme
let g:neosolarized_visibility = "normal" " Visibility of invisible characters.

set background=dark " Set colorscheme shade variant
colorscheme nord " Set default colorscheme

if has("nvim")
    set termguicolors
endif

" ------------------------------------------------------------------------------
"  Multiple windows
" ------------------------------------------------------------------------------

set hidden " Unload a buffer when no longer shown in a window.

" ------------------------------------------------------------------------------
"  Multiple tab pages
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Terminal
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Using the mouse
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  GUI
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Printing
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Messages and info
" ------------------------------------------------------------------------------

" Shut off completion messages
set shortmess+=c

" ------------------------------------------------------------------------------
"  Selecting text
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Editing text
" ------------------------------------------------------------------------------

" see :h fo-table
set formatoptions=crqj
"Set text wrapping and color column at 80 chars
set textwidth=80

set completeopt=menu,menuone,noselect

" Default omnifunc setting
set omnifunc=syntaxcomplete#Complete

" sane backspace
set backspace=2

" ------------------------------------------------------------------------------
"  Tabs and indenting
" ------------------------------------------------------------------------------

let tabWidth=4

let &tabstop=tabWidth " Number of spaces a <Tab> in the text stands for.
let &shiftwidth=tabWidth " Number of spaces used for each step of (auto)indent.
let &softtabstop=tabWidth " If non-zero, number of spaces to insert for a <Tab>.
set smarttab " A <Tab> in an indent inserts 'shiftwidth' spaces.
set expandtab " Do not expand <Tab> to spaces in Insert mode.

set autoindent " Automatically set the indent of a new line.
set copyindent " Copy whitespace for indenting from previous line.

" ------------------------------------------------------------------------------
"  Folding
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Diff mode
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Mapping
" ------------------------------------------------------------------------------

let mapleader=','

" No more escape key! Yay!
inoremap jk <Esc>

" Edit $MYVIMRC in new tab.
nnoremap <leader>v :tabedit ~/.dotfiles/files/vimrc<CR>

" Save current buffer
nnoremap <leader>w :w<CR>

" Quit current buffer
nnoremap <leader>q :q<CR>

" Write then quit buffer
nnoremap <leader>x :wq<CR>

" Delete current buffer.
nnoremap <leader>d :bd! %<CR>

" Better window navigation.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Directory navigation.
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" If you forgot to sudo Vim
cnoremap w!! w !sudo tee % >/dev/null

" My own version of temporary fullscreen
nnoremap tt :tab split<CR>

" Terminal navigation
tmap <C-h> <C-\><C-n><C-w>h
tmap <C-j> <C-\><C-n><C-w>j
tmap <C-k> <C-\><C-n><C-w>k
tmap <C-l> <C-\><C-n><C-w>l

""""""""""""""
"  Deoplete  "
""""""""""""""
" use ctrl j/k to maneuver
" inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
" inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Use tab and shift-tab to maneuver
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

""""""""""""""""""
"  vim-fugitive  "
""""""""""""""""""
nnoremap <leader>gb  :Gblame<CR>
nnoremap <leader>gc  :Gcommit<CR>
nnoremap <leader>gca :Gcommit -a<CR>
nnoremap <leader>gd  :Gdiff<CR>
nnoremap <leader>gl  :Gpull<CR>
nnoremap <leader>gp  :Gpush<CR>
nnoremap <leader>gr  :Gread<CR>
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <leader>gw  :Gwrite<CR>

""""""""""""""
"  lite-dfm  "
""""""""""""""

" toggle Distraction-free editing
nnoremap <Leader>z :LiteDFMToggle<CR>i<Esc>`^

"""""""""""""""""""
"  float-preview  "
"""""""""""""""""""
" Close on autocmd
let g:float_preview#auto_close = 0
" change position of window
" let g:float_preview#docked = 0

"""""""""""""""
" vim-signify "
"""""""""""""""

" Show diff in floating window
nnoremap <leader>gh :SignifyHunkDiff<cr>
" Undoes current hunk
nnoremap <leader>gu :SignifyHunkUndo<cr>
" Displays a single-pane diff with folds
nnoremap <leader>gf :SignifyFold<cr>

" ------------------------------------------------------------------------------
"  Reading and writing files
" ------------------------------------------------------------------------------

set backup " Keep a backup after overwriting a file.
set writebackup " Write a backup file before overwriting a file.
set backupdir=~/.config/nvim/.backup// " List of directories to put backup files
" in.

" ------------------------------------------------------------------------------
"  The swap file
" ------------------------------------------------------------------------------

set directory=~/.config/nvim/.swp// " Directory to keep .swp files in.

" Apparently helps with async plugins
set updatetime=300

" ------------------------------------------------------------------------------
"  Command line editing
" ------------------------------------------------------------------------------

set wildmenu " Command-line completion shows a list of matches.
set wildignore+=*/.git/*,*/.hg/*,*/.svn/* " Ignore version management.

" ------------------------------------------------------------------------------
"  Executing external commands
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Running make and jumping to errors
" ------------------------------------------------------------------------------

set makeprg=make\ %:r

" ------------------------------------------------------------------------------
"  Language specific
" ------------------------------------------------------------------------------

" let g:python_host_prog = '/usr/bin/python3'

" ------------------------------------------------------------------------------
"  Multi-byte characters
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Various
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" Autocmds
" ------------------------------------------------------------------------------

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  " autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
  autocmd FileType vue AutoFormatBuffer prettier
augroup END


" Only close preview window after saving or leaving insert
augroup deoplete
    autocmd BufWrite,InsertLeave * if pumvisible() == 0 | call float_preview#close()
                \ | endif
augroup END

" Immersive term
augroup terminal_setting
    autocmd TermOpen * setlocal nonumber norelativenumber nocursorline
                \ colorcolumn=0
augroup END

" Delete all fugitive buffers after leaving
augroup fugitive
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" ------------------------------------------------------------------------------
" Functions
" ------------------------------------------------------------------------------
