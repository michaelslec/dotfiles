" ------------------------------------------------------------------------------
"  Vim package manager
" ------------------------------------------------------------------------------
call plug#begin('~/.config/nvim/bundle')

" ------------------------------------------------------------------------------
"  My Plugins
" ------------------------------------------------------------------------------

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/deoplete-clangx'
Plug 'Shougo/neoinclude.vim'
Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'tpope/vim-surround'
Plug 'tomtom/tcomment_vim'
Plug 'iCyMind/NeoSolarized'
Plug 'bilalq/lite-dfm'
Plug 'joshdick/onedark.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'dietsche/vim-lastplace'
Plug 'neomake/neomake'
Plug 'jiangmiao/auto-pairs'
Plug 'ncm2/float-preview.nvim'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'nikvdp/neomux'

" ------------------------------------------------------------------------------
"  Important
" ------------------------------------------------------------------------------

call plug#end()
call glaive#Install()

filetype plugin indent on

set pastetoggle=<F3>

" ------------------------------------------------------------------------------
"  Plugin Settings
" ------------------------------------------------------------------------------

""""""""""""""
"  Deoplete  "
""""""""""""""
let g:deoplete#enable_at_startup=1

"""""""""""""
"  NeoMake  "
"""""""""""""
let g:neomake_c_gcc_maker = {
    \ 'args': ['-fsanitize=signed-integer-overflow', '-fsanitize=undefined',
    \ '-ggdb3', '-O0', '-std=c11', '-Wall', '-Werror', '-Wextra', '-Wno-sign-compare',
    \ '-Wshadow', '-pedantic'],
    \ }

let g:neomake_cpp_gcc_maker = {
    \ 'exe': 'g++',
    \ 'args': ['-fsanitize=signed-integer-overflow', '-fsanitize=undefined',
    \ '-ggdb3', '-O0', '-std=c++14', '-Wall', '-Werror', '-Wextra', '-Wno-sign-compare',
    \ '-Wshadow', '-pedantic'],
    \ }

let g:neomake_c_enabled_makers = ['gcc']
let g:neomake_cpp_enabled_makers = ['gcc']

call neomake#configure#automake('nw', 750)

""""""""""""""""
"  auto-pairs  "
""""""""""""""""
let g:AutoPairsFlyMode=1

"""""""""""""
"  leaderf  "
"""""""""""""
" let g:Lf_WindowPosition = 'fullScreen'
let g:Lf_FollowLinks = 1
let g:Lf_PreviewInPopup = 1

"""""""""""""""""
"  vim-codefmt  "
"""""""""""""""""

" Enables default mapping for code-fmt (<leader>=)
Glaive codefmt plugin[mappings]
" Changes c/c++ code formatting style
Glaive codefmt clang_format_style='WebKit'

" ------------------------------------------------------------------------------
"  Moving around, searching and patterns
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Tags
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Displaying text
" ------------------------------------------------------------------------------
"
set norelativenumber number " Display line numbers relative to cursor position.

set list " Show invisible characters.
set listchars=tab:▸\ ,eol:¬ " Set invisible character repsentations.

set concealcursor=inv
set conceallevel=2
" ------------------------------------------------------------------------------
"  Syntax, highlighting and spelling
" ------------------------------------------------------------------------------

set incsearch   " Show match for partly typed search command.
set ignorecase  " Ignore case when using a search pattern.
set smartcase   " Override 'ignorecase' when pattern has upper case
                " characters.

set cursorline " Highlight the screen line of the cursor.
set colorcolumn=80 " Columan to highlight.

syntax enable " Turns on syntax highlighting

" For solarized colorscheme
let g:neosolarized_visibility = "normal" " Visibility of invisible characters.

set background=dark " Set colorscheme shade variant
colorscheme NeoSolarized " Set default colorscheme

if has("nvim")
    set termguicolors
endif

" ------------------------------------------------------------------------------
"  Multiple windows
" ------------------------------------------------------------------------------

set hidden " Unload a buffer when no longer shown in a window.

" set laststatus=2 " Display vim-airline always.

" ------------------------------------------------------------------------------
"  Multiple tab pages
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Terminal
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Using the mouse
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  GUI
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Printing
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Messages and info
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Selecting text
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Editing text
" ------------------------------------------------------------------------------

" set formatoptions=cqanj
set formatoptions=cqj
set textwidth=80

set completeopt=menu,menuone

set backspace=2

" ------------------------------------------------------------------------------
"  Tabs and indenting
" ------------------------------------------------------------------------------

let tabWidth=4

let &tabstop=tabWidth " Number of spaces a <Tab> in the text stands for.
let &shiftwidth=tabWidth " Number of spaces used for each step of (auto)indent.
let &softtabstop=tabWidth " If non-zero, number of spaces to insert for a <Tab>.
set smarttab " A <Tab> in an indent inserts 'shiftwidth' spaces.
set expandtab " Do not expand <Tab> to spaces in Insert mode.

set autoindent " Automatically set the indent of a new line.
set copyindent " Copy whitespace for indenting from previous line.

" ------------------------------------------------------------------------------
"  Folding
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Diff mode
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Mapping
" ------------------------------------------------------------------------------

let mapleader=','

" No more escape key! Yay!
inoremap jk <Esc>

" Edit $MYVIMRC in new tab.
nnoremap <leader>v :tabedit ~/.dotfiles/files/vimrc<CR>

" Save current buffer
nnoremap <leader>w :w<CR>

" Quit current buffer
nnoremap <leader>q :q<CR>

" Write then quit buffer
nnoremap <leader>x :wq<CR>

" Delete current buffer.
nnoremap <leader>d :bd! %<CR>

" Better window navigation.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Directory navigation.
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" If you forgot to sudo Vim
cnoremap w!! w !sudo tee % >/dev/null

" My own version of temporary fullscreen
nnoremap tt :tab split<CR>

" Terminal navigation
tmap <C-h> <C-\><C-n><C-w>h
tmap <C-j> <C-\><C-n><C-w>j
tmap <C-k> <C-\><C-n><C-w>k
tmap <C-l> <C-\><C-n><C-w>l

""""""""""""""
"  Deoplete  "
""""""""""""""
" use ctrl j/k to maneuver
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Use tab and shift-tab to maneuver
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

"""""""""""""
"  NeoMake  "
"""""""""""""
nmap <Leader><Space>o :lopen<CR>      " open location window
nmap <Leader><Space>c :lclose<CR>     " close location window
nmap <Leader><Space>, :ll<CR>         " go to current error/warning
nmap <Leader><Space>n :lnext<CR>      " next error/warning
nmap <Leader><Space>p :lprev<CR>      " previous error/warning

""""""""""""""""""
"  vim-fugitive  "
""""""""""""""""""
nnoremap <leader>gb  :Gblame<CR>
nnoremap <leader>gc  :Gcommit<CR>
nnoremap <leader>gca :Gcommit -a<CR>
nnoremap <leader>gd  :Gdiff<CR>
nnoremap <leader>gl  :Gpull<CR>
nnoremap <leader>gp  :Gpush<CR>
nnoremap <leader>gr  :Gread<CR>
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <leader>gw  :Gwrite<CR>

""""""""""""""
"  lite-dfm  "
""""""""""""""

" toggle Distraction-free editing
nnoremap <Leader>z :LiteDFMToggle<CR>i<Esc>`^

"""""""""""""""""""
"  float-preview  "
"""""""""""""""""""
" Close on cmd
let g:float_preview#auto_close = 0
" change position of window
" let g:float_preview#docked = 0

" ------------------------------------------------------------------------------
"  Reading and writing files
" ------------------------------------------------------------------------------

set backup " Keep a backup after overwriting a file.
set writebackup " Write a backup file before overwriting a file.
set backupdir=~/.config/nvim/.backup// " List of directories to put backup files
" in.

" ------------------------------------------------------------------------------
"  The swap file
" ------------------------------------------------------------------------------

set directory=~/.config/nvim/.swp// " Directory to keep .swp files in.

" ------------------------------------------------------------------------------
"  Command line editing
" ------------------------------------------------------------------------------

set wildmenu " Command-line completion shows a list of matches.
set wildignore+=*/.git/*,*/.hg/*,*/.svn/* " Ignore version management.

" ------------------------------------------------------------------------------
"  Executing external commands
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Running make and jumping to errors
" ------------------------------------------------------------------------------

set makeprg=make\ %:r

" ------------------------------------------------------------------------------
"  Language specific
" ------------------------------------------------------------------------------

" let g:python_host_prog = '/usr/bin/python3'

" ------------------------------------------------------------------------------
"  Multi-byte characters
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
"  Various
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" Autocmds
" ------------------------------------------------------------------------------

"""""""""""""""""
"  vim-codefmt  "
"""""""""""""""""

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
  autocmd FileType vue AutoFormatBuffer prettier
augroup END

""""""""""""""
"  Deoplete  "
""""""""""""""

autocmd BufWrite,InsertLeave * if pumvisible() == 0 | call float_preview#close()
            \ | endif

""""""""""""""
"  Terminal  "
""""""""""""""

augroup terminal_setting
    autocmd TermOpen * setlocal nonumber norelativenumber nocursorline 
                \ colorcolumn=0
augroup END

" ------------------------------------------------------------------------------
" Functions
" ------------------------------------------------------------------------------
